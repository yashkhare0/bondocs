[tool.poetry]
name = "bondocs"
version = "0.0.0"  # This will be replaced dynamically
description = "Git‑native pre‑commit & CLI tool that keeps README and runbooks in sync using local or cloud LLMs."
authors = ["Yash Khare <yash.khare.work@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "bondocs", from = "src" }]

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry.dependencies]
python = "^3.9"
click = "^8.1"
rich = "^13.7"
langchain = "^0.1.12"
langchain-openai = "^0.0.8"
langchain-community = "^0.0.38"
langchain-anthropic = "^0.1.4"
python-dotenv = "^1.0"
patch-ng = "^1.17"     # apply unified diffs
gitpython = "^3.1"      # diff helpers for tests
httpx = "^0.27"         # Ollama ping / cloud calls
jinja2 = "^3.1"         # template rendering

[tool.poetry.group.dev.dependencies]
pytest = "^8.2"
pytest-git = "^1.7.0"
black = "^24.4"
ruff = "^0.5.3"
pre-commit = "^4.2.0"   # Updated to latest version
mypy = "^1.15.0"

[tool.poetry.scripts]
bondocs = "bondocs.cli:app"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
metadata = true
dirty = true
pattern = "default"
tag-dir = "tags"
full-commit = false
strict = false
fix-shallow-repository = false
ignore-untracked = false

[tool.poetry-dynamic-versioning.substitution]
files = ["*.py", "*/__init__.py", "*/__version__.py", "*/_version.py"]
patterns = [
    '''(^__version__\s*(?::.*?)?=\s*['"])[^'"]*(['"])''',
    { value = '''(^__version_tuple__\s*(?::.*?)?=\s*\()[^)]*(\))''', mode = "tuple" }
]

[tool.poetry-dynamic-versioning.files."src/bondocs/_version.py"]
persistent-substitution = true
initial-content = """
# This file is automatically generated by poetry-dynamic-versioning.
# Do not edit it manually.

__version__ = "0.0.0"
__version_tuple__ = (0, 0, 0)
"""

# Black configuration
[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "W",    # pycodestyle warnings
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "D",    # pydocstyle
]
ignore = [
    "D203",  # one-blank-line-before-class (incompatible with D211)
    "D212",  # multi-line-summary-first-line (incompatible with D213)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "E501", "F841"]  # Ignore docstring issues, long lines, and unused variables in tests
"*/__init__.py" = ["F401", "D104"]    # Ignore unused imports and missing docstrings in __init__ files

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "git.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.bondocs.llm"
disable_error_code = ["no-any-return", "arg-type", "return-value"]
